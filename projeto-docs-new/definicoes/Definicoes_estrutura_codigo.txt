====DEFINICOES GERAIS====
-Este documento define as conven√ß√µes e padr√µes para a estrutura de c√≥digo IDEAL do projeto.
-O objetivo √© garantir consist√™ncia, manutenibilidade e escalabilidade.
-As defini√ß√µes s√£o aplic√°veis a todos os novos desenvolvimentos e refatora√ß√µes.
-Esta √© a estrutura ALVO para a nova vers√£o da plataforma.

====‚ö†Ô∏è CONTEXTO DA MIGRA√á√ÉO - SEPARA√á√ÉO CR√çTICA====

**üé® FRONTEND (REORGANIZA√á√ÉO - N√ÉO √â DO ZERO):**
-V5 (atual) ‚Üí V0 (reorganizar componentes, manter funcionalidades)
-V1 (atual) ‚Üí Remover ap√≥s migra√ß√£o
-Limpar depend√™ncias V1/shared
-Reorganizar estrutura de pastas (/components/chat/ modular)
-MANTER interface visual EXATAMENTE IGUAL (zero quebra para usu√°rio)
-MANTER todas as funcionalidades (chat, skills, multimodal, etc)
-N√ÉO tocar em backend nessa etapa

**üîß BACKEND (DO ZERO TOTAL - RECONSTRU√á√ÉO COMPLETA):**
-‚ùå REMOVER backend antigo completamente
-‚úÖ CRIAR banco de dados do zero (schema novo em /projeto-docs-new/tabelas/)
-‚úÖ CRIAR migrations novas (valida√ß√£o campo por campo)
-‚úÖ CRIAR API routes novas (app/api/v0/*)
-‚úÖ CRIAR queries novas (lib/db/queries.ts)
-‚úÖ CRIAR Server Actions novas
-‚úÖ VALIDAR TUDO contra Definicoes_banco_de_dados.txt
-Backend novo ser√° vendor-agnostic (sem SDKs cloud-specific)
-Backend novo com RLS, ACL, GUC desde o in√≠cio

**üéØ RESULTADO PARA USU√ÅRIO:**
-Interface IGUAL (zero mudan√ßas visuais)
-Funcionalidades IGUAIS (zero quebras)
-Performance MELHOR (backend otimizado)
-Arquitetura LIMPA (front organizado + back moderno)

====ESTRUTURA DE PASTAS IDEAL====
-A estrutura de pastas segue o padr√£o Next.js App Router.
-Organiza√ß√£o por funcionalidade e tipo de arquivo.

/app                              # Rotas e layouts principais
  /(auth)                         # Rotas de autentica√ß√£o
    /login
    /signup
  /(main)                         # Rotas principais da aplica√ß√£o
    /chat                         # Chat principal (migrado de v5)
    /companions                   # Gerenciamento de companions
    /dashboard                    # Vis√£o geral e m√©tricas
    /settings                     # Configura√ß√µes do usu√°rio/organiza√ß√£o
    /workspaces                   # Gerenciamento de workspaces
  /(public)                       # Rotas p√∫blicas
    /login                        # Autentica√ß√£o
    /signup                       # Cadastro

/components                       # Componentes React
  /ui                            # shadcn/ui base components (Button, Card, Input, etc)
  /chat                          # Sistema de chat principal (migrado e limpo de v5)
    /core                        # Componentes core do chat
      chat-container.tsx         # Container principal
      chat-messages.tsx          # Renderiza√ß√£o de mensagens
      chat-input.tsx             # Input de mensagens
      welcome-screen.tsx         # Tela inicial
    /ai-elements                 # AI SDK Elements integrados
      ai-sdk-elements-native.tsx # Componentes nativos AI SDK
      chain-of-thought-demo.tsx  # Demo de CoT
    /headers                     # Headers e navega√ß√£o
      chat-header.tsx            # Header principal
      animated-header.tsx        # Header com anima√ß√µes
    /skills                      # Sistema de skills
      chat-skills-cards.tsx      # Cards de skills
      companion-selector.tsx     # Seletor de companions
    /multimodal                  # Input multimodal
      multimodal-input.tsx       # Input com m√∫ltiplos formatos
      preview-attachment.tsx     # Preview de anexos
    /context                     # Gerenciamento de contexto
      context-multi-selector.tsx # Seletor de contextos
      mcp-multi-selector.tsx     # Seletor MCP
    /ui                          # Componentes UI espec√≠ficos do chat
      icons.tsx                  # √çcones customizados
      scroll-to-bottom-button.tsx
      visibility-selector.tsx
    /utils                       # Utilit√°rios do chat
      message-utils.ts           # Helpers de mensagens
  /skill-engineering             # Engenharia de skills
  /workers                       # Workers para processamento ass√≠ncrono
  /workflows                     # Sistema de workflows
  /ai-elements-official          # AI SDK Elements oficiais (Conversation, Message, etc)
  /admin                         # Componentes de administra√ß√£o
  /agentic-rag                   # RAG agentic
  /auth                          # Autentica√ß√£o
  /debug                         # Ferramentas de debug
  /personal-memory               # Mem√≥ria pessoal
  /providers                     # Providers (AI, etc)

/lib                              # L√≥gica core e utilit√°rios
  /db                            # Database (Drizzle ORM)
    schema.ts                    # Schema completo do banco (reconstru√≠do)
    queries.ts                   # Queries reutiliz√°veis centralizadas
    migrations/                  # Migra√ß√µes do novo banco
  /ai                            # Configura√ß√µes AI SDK
    providers.ts                 # Providers configurados (myProvider com Azure)
  /auth                          # NextAuth configura√ß√£o e helpers
  /actions                       # Server Actions organizadas por feature
  utils.ts                       # Utilit√°rios gerais (cn, formatters, validators)

/hooks                            # Custom React Hooks
  use-chat.ts                    # Hook principal de chat (AI SDK 5.0)
  use-companion-*.ts             # Hooks de companions
  use-organization-context.ts    # Hook de contexto organizacional

/public                           # Assets est√°ticos (imagens, fontes)

/scripts                          # Scripts de automa√ß√£o e manuten√ß√£o

/tests                            # Testes (unit√°rios, integra√ß√£o, e2e)

====LIMPEZA NECESS√ÅRIA====
-REMOVER: /components/v1 (descontinuada)
-REMOVER: /components/v2 (se existir, descontinuada)
-REMOVER: /components/experimental (consolidar ou deletar)
-REMOVER: /components/flow (consolidar em workflows)
-REMOVER: /components/generative-ui (consolidar em chat core)
-MOVER: /components/v5/* ‚Üí /components/chat/* (estrutura reorganizada)
-LIMPAR: 50+ componentes soltos na raiz de /components (organizar em subpastas)

====CONVEN√á√ïES DE NOMENCLATURA====
-Pastas: kebab-case (my-folder, user-settings)
-Arquivos: kebab-case (my-component.tsx, use-auth.ts)
-Componentes React: PascalCase (MyComponent, UserProfileCard)
-Fun√ß√µes e vari√°veis: camelCase (formatDate, getUserProfile, isAuthenticated)
-Constantes: UPPER_SNAKE_CASE (MAX_FILE_SIZE, DEFAULT_TIMEOUT, API_VERSION)
-Types e Interfaces: PascalCase (ChatMessage, UserProfile, CompanionConfig)
-Enums: PascalCase com valores UPPER (Role.ADMIN, Status.ACTIVE)

====ORGANIZA√á√ÉO DE COMPONENTES====
-Server Components: Padr√£o, sempre async quando busca dados do banco
-Client Components: Apenas quando necess√°rio interatividade, estado, eventos
-Marcar Client Components explicitamente com 'use client' no topo do arquivo
-L√≥gica complexa de Client Components deve estar em hooks customizados
-Componentes devem ter m√°ximo 300 linhas (quebrar em subcomponentes se maior)

====COMPONENTES COMPARTILHADOS====
-N√ÉO usar /shared entre vers√µes (v1, v5, etc)
-Cada sistema (chat, workflows, workers) tem seus pr√≥prios componentes organizados
-Reutiliza√ß√£o atrav√©s de importa√ß√£o direta de pastas espec√≠ficas
-Componentes verdadeiramente compartilhados devem estar em /components/ui ou m√≥dulos espec√≠ficos
-PROBLEMA ATUAL: v5 importa de v1/shared (DEVE SER CORRIGIDO na migra√ß√£o)
  * multimodal-input-v5.tsx importa: ContextMultiSelector, ArrowUpIcon, MCPMultiSelector, PreviewAttachment
  * chat-v5-foundations.tsx importa: AnimatedHeader
  * chat-header-v5.tsx importa: LoaderIcon
  * chat-container-v1-layout.tsx importa: AnimatedHeader, ChatHeader
  * workflow-execution-layout.tsx importa: StepProgress
-SOLU√á√ÉO: Migrar esses componentes para a estrutura modular de /components/chat/

====INTEGRA√á√ÉO COM BANCO DE DADOS====
-Todas as queries centralizadas em lib/db/queries.ts
-Usar Drizzle ORM (nunca SQL raw direto)
-Sempre com tratamento de erro (try/catch)
-Queries devem considerar organizationId e userId (context)
-Server Actions para muta√ß√µes (create, update, delete)
-Valida√ß√£o de dados com Zod antes de salvar
-Revalida√ß√£o de cache ap√≥s muta√ß√µes (revalidatePath)
-Implementar Row-Level Security (RLS) para controle de acesso a dados
-Usar SET LOCAL para definir o Global User Context (GUC) no in√≠cio de cada requisi√ß√£o
-Backend ser√° reconstru√≠do: schema limpo, migra√ß√µes novas, queries otimizadas

====‚ö†Ô∏è VALIDA√á√ÉO CR√çTICA COM BANCO DE DADOS====
**SEMPRE que criar/modificar backend (API routes, Server Actions, queries):**
-‚úÖ VALIDAR estrutura contra Definicoes_banco_de_dados.txt
-‚úÖ VERIFICAR se tabelas existem no schema documentado
-‚úÖ VERIFICAR se colunas correspondem ao schema
-‚úÖ VERIFICAR se rela√ß√µes (FKs) est√£o corretas
-‚úÖ VALIDAR se RLS est√° configurado (tabelas sens√≠veis)
-‚úÖ VALIDAR se tipos TypeScript correspondem ao InferSelectModel
-‚úÖ VALIDAR se organizationId e userId est√£o sendo passados (contexto)
-‚ùå NUNCA criar queries sem consultar o schema documentado

**Arquivo de refer√™ncia obrigat√≥rio:** Definicoes_banco_de_dados.txt
**Antes de qualquer mutation:** Validar com Zod usando schema documentado

====AI SDK 5.0 - REGRAS OBRIGAT√ìRIAS====
-SEMPRE usar myProvider (lib/ai/providers.ts) configurado com Azure
-NUNCA criar providers customizados ou usar SDKs cloud-specific
-SEMPRE usar AI SDK Elements oficiais (Conversation, Message, Response)
-NUNCA implementar streaming ou tool calling manualmente
-Usar useChat hook nativo para chat (nunca implementa√ß√£o custom)
-System prompts via parameter 'system' do AI SDK
-Convers√£o de mensagens via convertToModelMessages quando necess√°rio
-AI SDK √© a base do sistema de chat
-Utilizar AI SDK Elements para componentes de UI de chat
-Implementar workers para processamento ass√≠ncrono de tarefas de IA

====COMPONENTES CHAT V0 - O QUE MANTER E O QUE USAR NATIVO====
**‚úÖ MANTER DO V5 ATUAL:**
-MultimodalInputV5: Input atual com anexos, contexto e MCP (components/v5/chat/multimodal-input-v5.tsx)
-ChatHeaderV5: Header atual com companion selector e configura√ß√µes (components/v5/chat/chat-header-v5.tsx)
-Motivo: J√° funcionam bem e t√™m todas as funcionalidades necess√°rias

**‚úÖ USAR 100% NATIVO AI SDK 5.0:**
-Conversation: Container de mensagens (AI SDK Elements oficial)
-Message: Renderiza√ß√£o de cada mensagem (AI SDK Elements oficial)
-Response: Resposta com streaming (AI SDK Elements oficial)
-useChat: Hook de estado do chat (AI SDK hook nativo)
-streamText: Streaming de respostas (AI SDK fun√ß√£o nativa)
-tools: Ferramentas/fun√ß√µes (AI SDK tools object nativo)

**‚ùå NUNCA CRIAR CUSTOM:**
-Implementa√ß√µes manuais de streaming de mensagens
-Renderiza√ß√£o custom de mensagens
-Implementa√ß√µes manuais de tool calling
-Input multimodal custom (usar o atual V5)
-Header custom (usar o atual V5)

====SISTEMA DE CONTEXTO====
-OrganizationContext: Context global com organizationId e userId
-Provider no root layout (app/layout.tsx)
-Acesso via hook useOrganizationContext
-NUNCA passar org/user via props quando context est√° dispon√≠vel
-Context usado para GUC (Global User Context) ‚Üí RLS no banco
-Garantir que todas as opera√ß√µes de dados respeitem o contexto da organiza√ß√£o
-Context deve ser injetado em todas as requisi√ß√µes via GUC

====AUTENTICA√á√ÉO E AUTORIZA√á√ÉO====
-NextAuth v5 configurado em lib/auth/config.ts
-Session cont√©m: userId, organizationId, role
-Prote√ß√£o de rotas via middleware.ts
-Roles: MasterSys (MS), OrgAdmin (OA), WspManager (WM), User (UR)
-Controle de acesso: Route Auth (telas) + RLS (dados) + ACL (recursos)
-Fluxo completo: GUC ‚Üí RLS ‚Üí ACL ‚Üí RAG
-NextAuth para gerenciamento de sess√£o e autentica√ß√£o
-Roles definidas em ENUMs para controle de acesso a rotas e funcionalidades
-Permiss√µes (ACL) para controle granular de acesso a recursos
-Sistema de permiss√µes ser√° reconstru√≠do no novo backend

====DESIGN SYSTEM - REGRAS OBRIGAT√ìRIAS====
-SEMPRE usar classes sem√¢nticas: bg-card, text-foreground, text-muted-foreground, border, bg-muted
-NUNCA usar cores hardcoded: bg-blue-500, text-gray-900, bg-white dark:bg-gray-800
-Suporte autom√°tico a light/dark mode via classes sem√¢nticas
-Componentes shadcn/ui em components/ui/ (Button, Card, Input, Dialog, etc)
-Radix UI como base dos componentes
-Framer Motion para anima√ß√µes suaves
-Lucide React para todos os √≠cones
-√çcones ASCII/emojis apenas para menus/sidebar
-√çcones do framework (Lucide) para telas e cards
-Tailwind CSS para estiliza√ß√£o
-shadcn/ui para componentes de UI
-Cores e tipografia definidas via CSS variables e classes Tailwind sem√¢nticas
-Modo claro/escuro implementado via next-themes

====RESPONSIVIDADE====
-Abordagem Mobile First obrigat√≥ria
-Breakpoints: xs(475px), sm(640px), md(768px), lg(1024px), xl(1280px), 2xl(1536px)
-Classes responsivas: w-full md:w-1/2 lg:w-1/3
-Testar em mobile, tablet e desktop

====PERFORMANCE E OTIMIZA√á√ÉO====
-Server Components por padr√£o (menos JavaScript no client)
-Suspense para loading states
-Dynamic imports para code splitting de componentes pesados
-Image component do Next.js para otimiza√ß√£o autom√°tica
-Lazy loading de componentes n√£o cr√≠ticos
-√çndices no banco para queries frequentes
-Cache de dados quando aplic√°vel
-Uso de caches (LRU, Redis)
-Minimizar re-renders em Client Components
-Otimiza√ß√£o de imagens

====TRATAMENTO DE ERROS====
-error.tsx em cada rota importante
-Error boundaries para componentes client cr√≠ticos
-Feedback amig√°vel ao usu√°rio (nunca mensagens t√©cnicas)
-Log de erros para debugging
-Fallbacks para estados de erro

====TESTES====
-Vitest para testes unit√°rios e de integra√ß√£o
-Playwright para testes end-to-end (e2e) e visuais
-BDD (Behavior-Driven Development) para descrever funcionalidades
-Testes devem cobrir a nova estrutura de chat e backend reconstru√≠do

====BOAS PR√ÅTICAS GERAIS====
-Componentes < 300 linhas (quebrar em subcomponentes se maior)
-Hooks < 150 linhas
-Services < 200 linhas
-Features BDD < 100 linhas
-Um problema = uma solu√ß√£o focada (n√£o m√∫ltiplas corre√ß√µes especulativas)
-Responsabilidade √∫nica por m√≥dulo/componente
-Interfaces claras entre m√≥dulos
-Evolu√ß√£o incremental sem quebrar funcionalidades existentes
-TypeScript obrigat√≥rio para tipagem forte
-ESLint e Prettier para formata√ß√£o e qualidade de c√≥digo
-Limitar complexidade de fun√ß√µes e componentes
-Coment√°rios claros e concisos onde necess√°rio
-Documenta√ß√£o inline para fun√ß√µes complexas

====TYPESCRIPT====
-Sempre tipar explicitamente props de componentes
-Sempre tipar retornos de fun√ß√µes
-Evitar 'any' (usar 'unknown' quando tipo √© desconhecido)
-Usar tipos do schema.ts via InferSelectModel
-Strict mode habilitado
-NoUncheckedIndexedAccess habilitado

====GIT E VERSIONAMENTO====
-Commits convencionais: feat:, fix:, docs:, refactor:, test:, chore:
-SEMPRE perguntar antes de git commit/push
-Branches: main (produ√ß√£o), fixes-* (corre√ß√µes), feature-* (novas features)
-Pull requests obrigat√≥rios para main
-Review de c√≥digo antes de merge
-NUNCA force push em main/master
-NUNCA skip hooks (--no-verify)

====SEGURAN√áA====
-NUNCA hardcode: API keys, tokens, senhas, secrets
-Sempre usar vari√°veis de ambiente (.env.local)
-Adicionar .env.local ao .gitignore
-Validar todos os inputs do usu√°rio com Zod
-Sanitizar dados antes de renderizar
-Usar prepared statements (Drizzle faz automaticamente)
-RLS (Row Level Security) habilitado em todas as tabelas sens√≠veis
-ACL (Access Control List) para recursos compartilhados
-Prote√ß√£o contra XSS, CSRF
-Uso de HTTPS
-Tokens JWT para autentica√ß√£o de APIs

====DOCUMENTA√á√ÉO DE C√ìDIGO====
-JSDoc para fun√ß√µes p√∫blicas e complexas
-Coment√°rios para l√≥gica n√£o √≥bvia
-README em features importantes
-CHANGELOG para mudan√ßas significativas
-Manter documenta√ß√£o atualizada com c√≥digo

====VENDOR-AGNOSTIC - REGRAS CR√çTICAS====
-SEMPRE preferir ecossistema Vercel (Next.js, AI SDK, Vercel packages)
-NUNCA usar SDKs espec√≠ficos de cloud (AWS SDK, Azure SDK direto, GCP SDK)
-SEMPRE criar abstra√ß√µes para funcionalidades cloud-specific
-Configuration-driven (n√£o hardcoded)
-Providers configur√°veis via environment variables

====PRIORIDADES DA MIGRA√á√ÉO====
1. Migrar v5/chat ‚Üí /components/chat (estrutura modular)
2. Eliminar depend√™ncias de v1/shared
3. Reconstruir backend (schema, queries, migrations)
4. Limpar componentes obsoletos (v1, v2, experimental)
5. Organizar 50+ componentes soltos na raiz
6. Consolidar sistemas (flow ‚Üí workflows, generative-ui ‚Üí chat core)
7. Atualizar testes para nova estrutura
8. Documentar APIs e componentes principais

====ESTRUTURA FINAL DE /COMPONENTS/CHAT====
/components/chat/
  /core/                         # Funcionalidades essenciais
    chat-container.tsx           # Container principal (< 300 linhas)
    chat-messages.tsx            # Renderiza√ß√£o de mensagens com AI SDK
    chat-input.tsx               # Input b√°sico (textarea nativo)
    welcome-screen.tsx           # Tela de boas-vindas
  /ai-elements/                  # AI SDK 5.0 Elements nativos
    conversation.tsx             # Conversation wrapper oficial
    message-renderer.tsx         # Renderizador com AI SDK Elements
    response-handler.tsx         # Handler de respostas streaming
    chain-of-thought.tsx         # Renderiza√ß√£o de steps
  /headers/                      # ‚úÖ MANTER ChatHeaderV5 atual
    chat-header-v5.tsx           # Header V5 com companion selector (MANTER)
    animated-header.tsx          # Header com anima√ß√µes (limpo)
  /skills/                       # Sistema de skills
    skills-carousel.tsx          # Carrossel de skills
    companion-selector.tsx       # Seletor de companions
  /multimodal/                   # ‚úÖ MANTER MultimodalInputV5 atual
    multimodal-input-v5.tsx      # Input V5 com anexos/contexto/MCP (MANTER)
    attachment-handler.tsx       # Handler de anexos (integrado no input)
    preview-attachment.tsx       # Preview de arquivos (integrado no input)
  /context/                      # Gerenciamento de contexto (LIMPO)
    context-selector.tsx         # Seletor de contextos (sem v1/shared)
    mcp-selector.tsx             # Seletor MCP (sem v1/shared)
  /ui/                           # Componentes UI espec√≠ficos
    icons.tsx                    # √çcones (usa Lucide React, n√£o v1/shared)
    scroll-button.tsx            # Scroll to bottom
    loading-indicator.tsx        # Indicadores de loading
  /utils/                        # Utilit√°rios e helpers
    message-utils.ts             # Helpers de mensagens
    chat-utils.ts                # Helpers gerais

====HOOKS CUSTOMIZADOS PARA CHAT V0====
/hooks/
  use-chat-v0.ts                 # Hook principal (wrapper do useChat AI SDK 5.0)
  use-chat-messages.ts           # Hook de gerenciamento de mensagens
  use-companion-selector.ts      # Hook de sele√ß√£o de companion
  use-chat-state.ts              # Hook de estado do chat

====API ROUTES PARA CHAT V0====
/app/api/v0/
  /chat/
    route.ts                     # Endpoint principal (usa myProvider + streamText)

====REGRAS CR√çTICAS CHAT V0====
‚úÖ SEMPRE:
- MANTER MultimodalInputV5: Input atual com anexos, contexto e MCP (j√° funciona perfeitamente)
- MANTER ChatHeaderV5: Header atual com companion selector (j√° funciona perfeitamente)
- Usar AI SDK 5.0 Elements nativos (Conversation, Message, Response)
- Usar myProvider.languageModel('chat-model') do lib/ai/providers.ts
- Usar useChat hook nativo (nunca implementa√ß√£o custom)
- Usar streamText para streaming (nunca implementa√ß√£o manual)
- Usar Lucide React para √≠cones (nunca v1/shared/icons.tsx)
- Usar shadcn/ui components (Button, Textarea, Card)
- Usar cores sem√¢nticas (bg-card, text-foreground, border)
- Componentes < 300 linhas (quebrar em subcomponentes)
- Props tipadas explicitamente com TypeScript
- Server Components por padr√£o, 'use client' apenas quando necess√°rio

‚ùå NUNCA:
- Criar input multimodal custom (MANTER MultimodalInputV5 atual)
- Criar header custom (MANTER ChatHeaderV5 atual)
- Criar componentes custom de mensagens (USAR AI SDK Elements nativos)
- Implementar streaming manualmente (USAR streamText do AI SDK)
- Implementar tool calling manualmente (USAR tools object nativo)
- Importar de ../../v1/shared/ (PROIBIDO)
- Importar de ../../v1/chat/ (PROIBIDO)
- Usar SDKs cloud-specific (AWS SDK, Azure SDK, GCP SDK)
- Hardcodar IDs, API keys, tokens, valores
- Usar cores hardcoded (bg-blue-500, text-gray-900)

====TEMPLATE DE COMPONENTE CHAT V0====
/**
 * üéØ [NOME] V0 - [Descri√ß√£o]
 * 
 * ‚úÖ COMPLIANCE CHECKLIST:
 * - [x] [Server/Client] Component
 * - [x] < 300 linhas
 * - [x] Props tipadas explicitamente
 * - [x] Cores sem√¢nticas (bg-card, text-foreground)
 * - [x] Zero depend√™ncias V1/shared
 * - [x] √çcones do Lucide React
 * - [x] Usa AI SDK 5.0 Elements (se aplic√°vel)
 * 
 * @module components/chat/[subpasta]/[arquivo]
 */

'use client'; // ou omitir para Server Component

import { cn } from '@/lib/utils';
import { IconName } from 'lucide-react'; // ‚úÖ Lucide direto
import type { Session } from 'next-auth';
import React from 'react';

interface ComponentNameProps {
  /** Descri√ß√£o da prop */
  propName: string;
  /** Sess√£o do usu√°rio */
  session: Session;
  /** Classe CSS personalizada */
  className?: string;
}

export function ComponentName({
  propName,
  session,
  className,
}: ComponentNameProps) {
  return (
    <div className={cn("base-classes", className)}>
      {/* Conte√∫do */}
    </div>
  );
}

====CHECKLIST PR√â-COMMIT CHAT V0====
**ARQUITETURA:**
- [ ] Server Component por padr√£o (async se busca dados)?
- [ ] Client Component marcado com 'use client'?
- [ ] Componente < 300 linhas?
- [ ] L√≥gica complexa em hooks customizados?

**AI SDK 5.0:**
- [ ] Usa myProvider.languageModel('chat-model')?
- [ ] Usa useChat nativo (n√£o custom)?
- [ ] Usa streamText para streaming?
- [ ] System prompts via 'system' parameter?
- [ ] NUNCA implementa streaming manualmente?

**VENDOR-AGNOSTIC:**
- [ ] Usa ecossistema Vercel (Next.js + AI SDK)?
- [ ] NUNCA usa SDKs cloud-specific?
- [ ] Configuration-driven (env vars)?
- [ ] Abstra√ß√µes para cloud-specific features?

**DESIGN SYSTEM:**
- [ ] Cores sem√¢nticas (bg-card, text-foreground, border)?
- [ ] NUNCA cores hardcoded (bg-blue-500)?
- [ ] Componentes shadcn/ui (Button, Textarea)?
- [ ] √çcones do Lucide React?
- [ ] NUNCA √≠cones de v1/shared?

**ZERO DEPS V1:**
- [ ] NUNCA importa de ../../v1/shared/?
- [ ] NUNCA usa AnimatedHeader de V1?
- [ ] NUNCA usa icons.tsx de V1?
- [ ] NUNCA usa ContextMultiSelector de V1?
- [ ] NUNCA usa MCPMultiSelector de V1?
- [ ] NUNCA usa PreviewAttachment de V1?

**CONTEXTO E AUTH:**
- [ ] Usa OrganizationContext (org + user)?
- [ ] Usa session.user.id e session.user.organizationId?
- [ ] NUNCA hardcode IDs, emails, tokens?
- [ ] Valida√ß√£o com Zod antes de salvar?

**BANCO DE DADOS:**
- [ ] Queries em lib/db/queries.ts?
- [ ] NUNCA query direto nos componentes?
- [ ] Drizzle ORM (n√£o SQL raw)?
- [ ] Try/catch em todas as queries?
- [ ] RLS habilitado para queries sens√≠veis?
- [ ] ‚ö†Ô∏è VALIDOU estrutura contra Definicoes_banco_de_dados.txt?
- [ ] ‚ö†Ô∏è VERIFICOU se tabelas/colunas existem no schema documentado?
- [ ] ‚ö†Ô∏è VERIFICOU se rela√ß√µes (FKs) est√£o corretas?
- [ ] ‚ö†Ô∏è VALIDOU tipos TypeScript com InferSelectModel?

**TYPESCRIPT:**
- [ ] Props tipadas explicitamente?
- [ ] Retornos de fun√ß√µes tipados?
- [ ] NUNCA usa 'any' (usar 'unknown')?
- [ ] Tipos do schema via InferSelectModel?
- [ ] Strict mode habilitado?

**TESTES:**
- [ ] Testes unit√°rios para hooks?
- [ ] Testes de integra√ß√£o para API?
- [ ] Testes e2e para fluxo completo?
- [ ] BDD features para comportamentos cr√≠ticos?

**DOCUMENTA√á√ÉO:**
- [ ] JSDoc para fun√ß√µes p√∫blicas?
- [ ] Coment√°rios para l√≥gica n√£o √≥bvia?
- [ ] README atualizado se nova feature?
- [ ] CHANGELOG se mudan√ßa significativa?

====CHECKLIST PR√â-COMMIT GERAL====
-[ ] Server Components onde poss√≠vel?
-[ ] Client Components marcados com 'use client'?
-[ ] Queries centralizadas em queries.ts?
-[ ] Types expl√≠citos em props e retornos?
-[ ] Cores sem√¢nticas (n√£o hardcoded)?
-[ ] AI SDK Elements para chat (n√£o custom)?
-[ ] OrganizationContext usado corretamente?
-[ ] Valida√ß√£o com Zod para inputs?
-[ ] Tratamento de erros adequado?
-[ ] Componente < 300 linhas?
-[ ] ESLint sem warnings?
-[ ] TypeScript sem erros (npm run type-check)?
-[ ] Testado manualmente?
-[ ] N√£o hardcodou secrets/keys?
-[ ] Usa configura√ß√µes do env.local?
-[ ] Vendor-agnostic (sem SDKs cloud-specific)?
